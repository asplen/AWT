**************************************************************
Двойная буферизация
--------------------------------------------------------------

Изображения удобны не только для хранения фотографий, как только что
было продемонстрировано - их также допускается применять в качестве
внеэкранных поверхностей рисования, позволяющих отображать любое
изображение, включая текст и графику, во внеэкранный буфер,
который можно отобразить позднее.

Преимущество такого подхода заключается в том,
что изображение будет видно только после завершения ero формирования.
Вычерчивание сложного изображения может занимать несколько
миллисекунд и более, что пользователь часто воспринимает как мигание
или мерцание. В итоге визуализация кажется пользователю более
медленным процессом, чем есть на самом деле.

Использование внеэкранного изображения для
уменьшения мерцания называется двойной буферизацией, поскольку экран
считается первым буфером для пикселей, а внеэкранное изображение -
вторым буфером, где можно подготовить пиксели для отображения.

Ранее в главе вы видели, как создавать пустой объект Image.

Теперь вы узнаете, каким образом рисовать на таком объекте Image вместо экрана.

Вспомните, что для применения любого метода визуализации Java необходим
объект Graphics.

Удобно то, что объект Graphics, который можно использовать для рисования
на изображении, доступен через метод getGraphics ().

Вот фрагмент кода, демонстрирующий создание нового изображения,
получение его графического контекста и заполнение всего изображения
пикселями красного цвета:

Canvas с = new Canvas ( ) ;
Image test = c.createImage (200, 100 ) ;
Graphics gc = test.getGraphics ( ) ;
gc.setColor (Color.red) ;
gc.fillRect (O, О, 200, 100 ) ;

После конструирования и заполнения внеэкранноrо изображения eгo по-прежнему не будет видно.
Чтобы отобразить изображение, понадобится вызвать метод drawImage() .