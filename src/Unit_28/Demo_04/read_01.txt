**************************************************************
ImageConsumer
--------------------------------------------------------------
Интерфейс ImageConsumer предназначен для объектов, которым
необходимо извлекать данные пикселей из изображений и предоставлять их как
данные другого вида.

Очевидно, он является противоположностью интерфейсаImage Producer.

Объект, реализующий интерфейс ImageConsumer, будет создавать целочисленные
или байтовые массивы, представляющие пиксели из объекта Image.

Ниже рассматривается класс
PixelGrabber, который обеспечивает простую реализацию интерфейса
ImageConsumer.

**************************************************************
PixelGraЬber
--------------------------------------------------------------
Класс PixelGrabber определен в пакете java.lang.image и является
противоположностью класса MemoryImageSource.

Вместо того чтобы формировать изображение из массива значений пикселей,
он получает существующее изображение и захватывает из него массив пикселей.

Прежде чем можно будет применять PixelGrabber, нужно создать
целочисленный массив, достаточно большой для хранения данных пикселей,
и затем создать экземпляр класса PixelGrabber, передав его
конструктору прямоугольник, который требуется захватить.

В заключение необходимо вызвать метод grabPixels() на экземпляре PixelGrabber.

Вот конструктор класса PixelGrabber, который используется в этой главе:

PixelGrabber ( Image imgObj , int left, int top, int width, int height, int [] pixel, int offset, int scanLineWidth)

В imgObj указывается объект, пиксели которого захватываются.
Значения left и top задают левый верхний угол, а width и height - размеры прямоугольника,
из которого будут получаться пиксели.

Пиксели сохраняются в массиве pixel, начиная с offset.

В scanLi neWidth передается ширина строки
развертки (которая часто совпадает с шириной изображения).

Ниже показаны сигнатуры метода grabPixels ():

boolean grabPixels () throws InterruptedException
boolean grabPixels ( long milliseconds ) throws InterruptedException

Обе формы метода возвращают true в случае успеха или false в случае неудачи.

Во второй форме в milliseconds указывается промежуток времени
в миллисекундах, в течение которого метод будет ожидать пиксели.

Обе формы генерируют исключение InterruptedException, если выполнение прерывается другим потоком.
