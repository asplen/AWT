*******************************************************************************
Unit_25___Обработка событий
_________________________________________________________________________
В этой главе рассматривается важный аспект Java: события.
Обработка событий играет основополагающую роль для программирования на Java,
поскольку является неотъемлемой частью создания многочисленных видов
приложений. Например, любая программа, использующая графический
пользовательский интерфейс, такая как приложение Java, написанное для Windows,
управляется именно событиями.

События поддерживаются несколькими пакетами, включая
java.util,
java.awt,
java.awt.event.

Начиная с версии JDK 9, пакеты java.awt и java.awt.event входят в
состав модуля java.desktop, а java.util находятся в модуле java.base.

Многие события, на которые будет реагировать ваша программа,
генерируются во время взаимодействия пользователя с программой на базе
графического пользовательского интерфейса. Как раз такие типы событий и
исследуются в настоящей главе.
Они передаются в программу различными
способами, причем конкретный метод зависит от фактического события.

Существует несколько типов событий, среди которых события, генерируемые
мышью, клавиатурой и различными элементами управления графического
интерфейса вроде кнопки, линейки прокрутки или флажка.

Глава начинается с обзора механизма обработки событий Java. Затем
обсуждается ряд классов событий и интерфейсов из библиотеки АWT
(Abstract Window Toolkit),
которая была первой инфраструктурой для построения графических
пользовательских интерфейсов Java и позволяет довольно просто
представить основы обработки событий. Затем в главе приводится несколько
примеров, демонстрирующих основы обработки событий. Кроме того, в главе
вводятся ключевые понятия, связанные с программированием для
графических пользовательских интерфейсов, и объясняется, как применять классы
адаптеров, внутренние классы и анонимные внутренние классы с целью
оптимизации кода, обрабатывающего события. Такие методики часто
используются в примерах, представленных далее в книге.

На заметку! Основное внимание в главе уделяется событиям, связанным с программами на базе
графических пользовательских интерфейсов. Однако события иногда применяются и для
целей, не связанных напрямую с программами подобного рода. Во всех случаях применяются
одни и те же способы обработки событий.
*******************************************************************************
Два механизма обработки событий
_________________________________________________________________________
Прежде чем приступить к обсуждению обработки событий, необходимо
сделать важное замечание: способ обработки событий, принятый в исходной
версии Java (1.0), значительно изменился во всех последующих версиях Java,
начиная с 1.1.

Хотя метод обработки событий версии 1.0 по-прежнему поддерживается,
использовать его в новых программах не рекомендуется. Кроме
того, многие методы, поддерживающие старую модель событий версии 1.0,
были объявлены нерекомендуемыми.

Современный подход предусматривает
обработку событий во всех новых программах так, как описано в настоящей
главе.

В модели делегирования обработки событий прослушиватели должны
регистрироваться в источнике, чтобы получать уведомления о поступлении
событий, что обеспечивает важное преимущество:

уведомления отправляются только тем прослушивателям,
которые желают их получать.

Такой способ обработки событий гораздо эффективнее схемы,
которая применялась в исходном подходе Java 1.0,
когда событие распространялось вверх по иерархии
включения до тех пор, пока его не обрабатывал какой-нибудь компонент.

В итоге компоненты должны были получать события, которые они не
обрабатывали, и понапрасну тратилось время.

Модель делегирования обработки
событий устраняет накладные расходы подобного рода.

