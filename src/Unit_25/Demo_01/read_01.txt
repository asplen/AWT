*******************************************************************************
Обработка событий мыши
_________________________________________________________________________

Для обработки событий мыши понадобится реализовать интерфейсы
MouseListener и MouseMotionListener. (Можно также реализовать интерфейс
MouseWheelListener, но здесь это не делается.)

Процесс продемонстрирован в следующей программе
MouseEventsDemo,
которая отображает текущие координаты
мыши в своем окне.
При каждом нажатии кнопки в месте нахождения указателя мыши
отображается сообщение Button Down (Кнопка нажата), а при
каждом отпускании кнопки - сообщение Button Released (Кнопка отпущена).
Если произведен щелчок кнопкой мыши, тогда в текущем местоположении
мыши отображается сообщение о данном факте.

Когда указатель мыши наводится на окно или покидает его,
отображается сообщение Mouse entered (Указатель мыши наведен на окно)
или Mouse exited (Указатель мыши покинул окно).

При перетаскивании мыши отображается символ *,
который следует за указателем мыши по мере его перетаскивания.
Обратите внимание, что две переменные, mouseX и mouseY, хранят
местоположение указателя мыши, когда происходят события нажатия кнопки,
отпускания кнопки или перетаскивания указателя мыши. Затем координаты
mouseX и mouseY задействуются в методе paint() для отображения вывода в
точке, где возникали события.
*******************************************************************************
Давайте внимательно рассмотрим пример. Первым делом обратите внимание,
что класс MouseEventsDerno расширяет Frame. Таким образом, он формирует
окно верхнего уровня для приложения.

Далее обратите внимание на реализацию им интерфейсов MouseListener и MouseMotionListener,
которые содержат методы, получающие и обрабатывающие события мыши различных типов.

Кроме того, класс MouseEventsDemo является одновременно
источником и прослушивателем этих событий.

Дело в том, что Frame предоставляет методы addMouseListener () и addMouseMotionListener ().
Применение одного и того же класса в качестве источника и прослушивателя событий - вовсе не редкость в простых программах с графическим пользовательским интерфейсом.

Внутри конструктора MousеEvents Derno программа регистрируется как прослушиватель событий мыши,
для чего вызываются методы
addМouseListener() и addМouseMotionListener():
void addМouseListener (MouseListener ml )
void addMouseMotionListener (MouseMotionListener mml )

В ml передается ссылка на объект, получающий события мыши, а в
mml ссылка на объект, получающий события перемещения мыши.

В программе обе ссылки указывают на тот же самый объект.

Затем класс MouseEventsDemo реализует все методы, определенные интерфейсами MouseListener и
MouseMotionListener, т.е. обработчики разнообразных событий мыши.

Каждый метод обрабатывает свое событие и затем возвращает управление.

Обратите внимание, что в конструкторе класса MouseEventsDerno также
добавляется объект реализации WindowListener.

Он необходим для того, чтобы программа реагировала на событие закрытия окна, когда пользователь
щелкает на кнопке закрытия.

Для реализации интерфейса WindowListener этот прослушиватель использует класс адаптера.

Классы адаптеров предоставляют пустые реализации интерфейса прослушивателя,
позволяя переопределять только интересующие методы.

Они подробно описаны далее в главе, но здесь применяется один из них, чтобы значительно
упростить код, необходимый для закрытия программы.

В данном случае переопределяется метод windowClosing (), который инфраструктура AWT
вызывает при закрытии окна. В нем производится вызов System.exit (), чтобы завершить программу.

Далее обратите внимание на обработчики событий мыши.

Каждый раз, когда происходит событие мыши, ml присваивается строка, описывающая,
что произошло, и затем вызывается метод repaint ().

Здесь метод repaint () в конечном итоге заставляет  WT вызывать paint () для отображения вывода.
(Более подробно процесс будет исследован в главе 26.)

Как видите, метод paint () принимает параметр типа Graphics.
Класс Graphics описывает графический контекст программы, который нужен для вывода.
В программе используется метод drawString() класса Graphics для фактического отображения строки
в указанном местоположении Х, У окна. Ниже показана форма
метода drawString (), применяемая в программе:
void drawString ( String message, int х, int у)

В message указывается строка, которая должна быть выведена, начиная с
позиции х, у.

В окне Java верхний левый угол находится в позиции О, О.

Как уже упоминалось, переменные mouseX и mouseY отслеживают местоположение указателя мыши.

Их значения передаются методу drawString () в качестве позиции для отображения вывода.

Наконец, программа запускается путем создания экземпляра MouseEventsDemo, после чего
устанавливаются размеры окна и его заголовок, а затем окно
делается видимым.

Соответствующие функциональные средства обсуждаются в главе 26.