*******************************************************************************
Связь с архитектурой MVC
_______________________________________

В общем случае визуальный компонент характеризуют три разных аспекта:

• внешний вид компонента при визуализации на экране;
• способ реагирования компонента на действия пользователя;
• информация о состоянии, ассоциированная с компонентом.

Независимо от того, какая архитектура используется для реализации
компонента, он должен неявно содержать указанные три части.

Существует архитектура компонентов, которая за прошедшие годы доказала
свою исключительную эффективность:

модель-представление-контроллер
(Model-View-Controller ).
- MVC

Успех архитектуры MVC обусловлен тем, что каждая ее часть соответствует отдельному аспекту компонента.

В рамках терминологии MVC модель соответствует информации о состоянии, связанной с компонентом.
Например, в случае флажка модель содержит поле, которое указывает, установлен флажок или нет.

Представление определяет, каким образом компонент отображается на экране, включая любые аспекты вида,
на которые влияет текущее состояние модели.

Контроллер устанавливает, как компонент реагирует на действия пользователя.

Скажем, когда пользователь щелкает на флажке, контроллер реагирует изменением модели,
отражая выбор пользователя (отмечен или не отмечен), что приводит к обновлению представления.

За счет разделения компонента на модель, представление и контроллер можно изменить
конкретную реализацию любой части, не затрагивая остальные.

Например, различные реализации представления могут визуализировать один и тот же компонент
поразному, не влияя на модель или на контроллер.

Хотя архитектура MVC и лежащие в ее основе принципы концептуально
верны, высокий уровень разделения между представлением и контроллером
невыгоден для компонентов Swing.

Взамен в Swing применяется модифицированная версия MVC, которая объединяет представление и контроллер в
единую логическую сущность, называемую делегатом пользовательского интерфейса.

    По этой причине подход Swing называется либо архитектурой модель-делегат (Model-Delegate),
    либо архитектурой раздельная модель (Separable Model).

Таким образом, хотя архитектура компонентов Swing основана на
MVC, она не использует классическую реализацию MVC.

Подключаемый внешний вид Swing стал возможен благодаря архитектуре
"модель-делегат":
Поскольку представление (внешний вид) и контроллер (поведение) отделены от модели,
внешний вид и поведение можно изменять, не оказывая влияние на способ применения
компонента в программе.

И наоборот, можно настраивать модель, не влияя на то, каким образом компонент
отображается на экране или реагирует на действия пользователя.

Для поддержки архитектуры "модель-делегат" большинство компонентов
Swing содержат два объекта.

    Первый представляет модель, а второй - делегат пользовательского интерфейса.

Модели определяются интерфейсами. Скажем, модель для кнопки определяется интерфейсом ButtonModel.

Делегаты пользовательского интерфейса - это классы, унаследованные от
ComponentUI.
Например, в качестве делегата пользовательского интерфейса
для кнопки выступает ButtonUI. Обычно в программах не придется
взаимодействовать напрямую с делегатом пользовательского интерфейса