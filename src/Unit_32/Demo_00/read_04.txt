*******************************************************************************
Две ключевые особенности Swing
_______________________________________

Как объяснялось выше, инфраструктура Swing была создана для устранения ограничений,
присутствующих в AWT, что достигается благодаря двум ключевым особенностям:
легковесным компонентам и подключаемому внешнему виду.

Вместе они обеспечивают элегантное, но простое в применении
решение проблем, присущих AWT.

Именно указанные две особенности определяют сущность Swing.

Ниже они рассматриваются по очереди.
*******************************************************************************
Компоненты Swing являются легковесными
*******************************************************************************

За редким исключением компоненты Swing легковесны, т.е. они полностью
написаны на Java и не сопоставляются напрямую с равноправными компонентами,
специфичными для платформы.
Таким образом, легковесные компоненты обладают более высокой эффективностью
и гибкостью. Кроме того, поскольку легковесные компоненты не транслируются
в собственные равноправные компоненты, внешний вид каждого компонента
определяется инфраструктурой Swing, а не лежащей в основе операционной системой.

В итоге каждый компонент будет работать единообразно на всех платформах.



*******************************************************************************
Инфраструктура Swing поддерживает подключаемый внешний вид
*******************************************************************************
Инфраструктура Swing поддерживает подключаемый внешний вид
(pluggable look and feel - PLAF).

Так как каждый компонент Swing визуализируется кодом Java, а не собственными
равноправными компонентами, внешний вид компонента находится под контролем Swing.

Данный факт означает, что можно отделить внешний вид компонента от его логики,
чем собственно и занимается Swing.

Отделение внешнего вида дает значительное преимущество:
появляется возможность изменить способ визуализации компонента,
не затрагивая другие его аспекты. Другими словами, к любому компоненту можно
"подключить" новый внешний вид, не создавая никаких побочных эффектов в
коде, использующем этот компонент.

Более того, несложно даже определять целые наборы внешних видов,
которые представляют различные стили графического пользовательского интерфейса.

Для применения определенного стиля просто "подключается" его внешний вид,
после чего все компоненты автоматически визуализируются с использованием данного стиля.

Подключаемый внешний вид обеспечивает ряд важных преимуществ.
Скажем, можно определить внешний вид, который будет выглядеть согласованным на всех платформах.
И наоборот, можно создать внешний вид, предназначенный для специфической платформы.

Также есть возможность спроектировать специальный внешний вид.

Наконец, внешний вид можно динамически изменять во время выполнения.

В Java предоставляются внешние виды вроде metal и Nimbus, которые доступны всем пользователям Swing.

Внешний вид metal также называют внешним видом Java.
Он не зависит от платформы и доступен во всех исполняющих средах Java.

Вдобавок он выбирается по умолчанию. В книге применяется
стандартный внешний вид Java (metal), т.к. он не зависит от платформы.