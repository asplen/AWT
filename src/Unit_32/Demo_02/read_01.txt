*******************************************************************************
Рисование в Swing
_______________________________________

Хотя набор компонентов Swing достаточно мощный, вы не ограничены
только им, т.к. Swing позволяет записывать и непосредственно в область
отображения фрейма, панели или какого-то другого компонента Swing, скажем,
JLabel.

Несмотря на то что во многих сценариях использования Swing
рисование прямо на поверхности компонента не требуется, оно доступно для
тех приложений, которым нужна такая возможность.

Для записи вывода непосредственно на поверхность компонента будет
применяться один или несколько методов рисования, определенных в AWT,
например, drawLine () или drawRect ().

Таким образом, большинство приемов и методов, описанных в главе 26, годится и для Swing.

Однако существует ряд очень важных
отличий, а сам процесс подробно обсуждается в настоящем разделе.
_______________________________________
Основы рисования
_______________________________________
Подход Swing к рисованию основан на первоначальном механизме AWT,
но реализация Swing предлагает более детализированное управление.
Прежде чем приступить к изучению особенностей рисования на базе Swing,
полезно рассмотреть внутренний механизм, основанный на AWT.

В классе Component из AWT определен метод paint (), который предназначен
для рисования прямо на поверхности компонента.
Как правило, метод paint () в программе не вызывается.
(На самом деле он должен вызываться в программе только в самых необычных случаях.)

Напротив, метод paint () вызывается исполняющей средой всякий раз, кода
компонент должен быть визуализирован.

Ситуация подобного рода может возникать по нескольким
причинам. Например, окно, в котором отображается компонент, может быть
перекрыто другим окном, а затем снова появиться.
Или же окно может быть свернуто и впоследствии восстановлено.

Метод paint () также вызывается в начале выполнения программы.

При написании кода на базе AWT метод
paint () будет переопределяться в приложении, когда ему необходимо
записывать вывод непосредственно на поверхность компонента.

Поскольку класс JComponent унаследован от Component, все легковесные
компоненты Swing наследуют метод paint ().
Тем не менее, он не будет переопределяться, чтобы рисовать прямо на поверхности компонента.
Причина в том, что в Swing используется чуть более сложный подход к рисованию,
вовлекающий три метода:
paintComponent()
paintBorder()
paintChildren()

Они рисуют указанную часть компонента и делят процесс
рисования на три отдельных логических действия.
В легковесном компоненте первоначальный метод paint () из AWT просто вызывает
эти методы в указанном выше порядке.

Для рисования на поверхности компонента Swing будет создаваться подкласс компонента
и затем переопределяться ero метод paintComponent (), который рисует внутреннюю
часть компонента. Остальные два метода рисования обычно не переопределяются.

При переопределении paintComponent()
первое, что потребуется сделать - вызвать super.paintComponent(), чтобы
выполнилась часть процесса рисования суперкласса.
(Единственный случай, когда такой вызов не нужен - при полном ручном контроле
над отображением компонента.)

Далее понадобится записать вывод, подлежащий отображению.
Вот метод paintComponent ():

protected void paintComponent (Graphics g)

В параметре g передается графический контекст, куда записывается вывод.

Чтобы инициировать рисование компонента под управлением программы,
необходимо вызвать метод repaint (), который работает в Swing точно так
же, как в AWT.

Метод repaint () определен в методе Component. Его вызов
заставляет систему вызывать paint(), как только это становится возможным.
Поскольку рисование является операцией, требующей много времени, такой
механизм позволяет исполняющей среде мгновенно отложить рисование до
тех пор, пока, например, не будет завершена какая-то задача с более высоким
приоритетом.

Конечно, в инфраструктуре Swing вызов paint () приводит к
вызову paintComponent().
Таким образом, для вывода на поверхность компонента программа будет хранить
вывод до тех пор, пока не произойдет вызов метода paintComponent ().
Сохраненный вывод будет рисоваться внутри переопределенного метода paintComponent ().

_______________________________________
Вычисление области рисования
_______________________________________

При рисовании на поверхности компонента важно ограничить вывод областью,
находящейся внутри компонента. Хотя Swing автоматически отсекает любой вывод,
выходящий за границы компонента, все же какая-то его
часть может оказаться на границе и при рисовании границы будет перекрыта.

Чтобы избежать такой ситуации, потребуется вычислить область рисования
компонента, которая определяется как текущий размер компонента минус
пространство, занимаемое границей.

Другими словами, прежде чем рисовать
компонент, нужно выяснить ширину границы и соответствующим образом
подстроить рисуемый вывод.

Получить ширину границы позволяет метод getinsets ():

Insets getinsets()

Он определен в классе Container и переопределен в JComponent.
Метод get insets () возвращает объект Insets, содержащий размеры границы,
которые можно выяснить с применением перечисленных далее полей:
                int top ;
int left ;                    int right ;
               int bottom;


Затем значения полей используются для вычисления области рисования с
учетом ширины и высоты компонента. Получить ширину и высоту компонента
можно посредством вызова методов getWidth() и getHeight () на компоненте:
int getWidth ()
int getHeight ()

Вычитая из ширины и высоты размеры границы, несложно вычислить полезную
ширину и высоту компонента.
