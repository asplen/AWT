**************************************************************
GridBagLayout
--------------------------------------------------------------
Хотя рассмотренные ранее компоновки идеально подходят для многих целей,
в некоторых ситуациях требуется чуть больший контроль над
тем, как располагаются компоненты.
Эффективный способ предусматривает использование гибкой сеточной компоновки, обеспечиваемой классом GridBagLayout.

Гибкая сеточная компоновка полезна тем, что позволяет задавать относительное расположение компонентов, указывая их позиции в
ячейках внутри сетки. Основная ее особенность заключается в том, что каждый компонент может иметь разные размеры, а
каждая строка в сетке способна содержать разное количество колонок. Именно потому такая компоновка называется
гибкой. Она выглядит как множество соединенных вместе маленьких сеток.

Местоположение и размеры каждого компонента в гибкой сеточной компоновке
определяются набором связанных с ним ограничений. Ограничения
содержатся в объекте типа GridВagConstraints.
В состав ограничений входит высота и ширина ячейки,
а также размещение компонента, ero выравнивание и точка привязки внутри ячейки.

Согласно общей процедуре работы с гибкой сеточной компоновкой
сначала создается новый объект GridBagLayout и делается текущим
диспетчером компоновки. Затем понадобится установить
ограничения, которые применяются к каждому компоненту,
который будет добавлен в гибкую сеточную
компоновку.
Наконец, компоненты добавляются в диспетчер компоновки. Хотя
GridBagLayout немного сложнее, чем другие диспетчеры компоновки, ero все
же довольно легко использовать, если вы понимаете, как иметь с ним дело.

В классе GridBagLayout определен единственный конструктор:

GridВagLayout()

Кроме того, в GridВagLayout определены методы, многие из которых
являются защищенными и не предназначенными для широкого применения.
Тем не менее, один из них использовать придется - setConstraints ():

void setConstraints(Component comp, GridВagConstraints cons)

Параметр сотр - это компонент, для которого применяются ограничения,
указанные в cons.

Метод setconstraints () устанавливает ограничения,
которые применяются к каждому компоненту в гибкой сеточной компоновке.
Основополагающей предпосылкой для успешного использования
GridBagLayout является надлежащая установка ограничений, хранящихся
в объекте GridBagConstraints. В классе GridВagConstraints определено
несколько полей, которые можно настроить для управления размером,
размещением и расстоянием между компонентами.
--------------------------------------------------------------
int anchor      Указывает местоположение компонента внутри ячейки.
                По умолчанию принимается GridВagConstraints.CENTER

int fill        Указывает, каким образом компонент изменяет размеры,
                если он меньше своей ячейки. Допустимые значения:
        GridBagConstraints.NONE (стандартное),
        GridBagConstraints.HORIZONTAL,
        GridBagConstraints.VERTICAL,
        GridBagConstraints.BOTH

int gridheight  Указывает высоту компонента в ячейках. По умолчанию
                принимается 1

int gridwidth   Указывает ширину компонента в ячейках. По умолчанию
                принимается 1

int gridx       Указывает координату Х ячейки, в которую будет
                добавлен компонент. По умолчанию принимается
                GridBagConstraints.RELATIVE

int gridy       Указывает координату У ячейки, в которую будет
                добавлен компонент. По умолчанию принимается
                GridВagCOnstraints .RELATIVE

Insets insets   Указывает вставки. По умолчанию все вставки принимаются равными О

int ipadx       Указывает дополнительный промежуток по горизонтали,
                окружающий компонент внутри ячейки. По умолчанию
                принимается О

int ipady       Указывает дополнительный промежуток по вертикали,
                окружающий компонент внутри ячейки. По умолчанию
                принимается О
double weightx  Указывает весовое значение, которое определяет
                промежутки по горизонтали между ячейками и краями
                содержащего их контейнера. По умолчанию принимается
                0.0. Чем выше весовое значение, тем больше
                пространства выделяется. Если все значения равны 0.0,
                тогда дополнительные промежутки равномерно распределяется
                между краями окна
double weighty Указывает весовое значение, которое определяет
                промежутки по вертикали между ячейками и краями
                содержащего их контейнера. По умолчанию принимается 0.0.
                Чем выше весовое значение, тем больше пространства
                выделяется. Если все значения равны 0.0 тогда
                дополнительные промежутки равномерно распределяется
                между краями окна
--------------------------------------------------------------

В классе GridBagConstraints также определены статические поля
Когда компонент по размерам меньше своей ячейки, можно применять
поле anchor, чтобы указать, где в ячейке будет располагаться верхний левый
угол компонента. Существуют три типа значений,
которые разрешено присваивать полю anchor.
Первый тип - абсолютные значения: (они заставляют компонент размещаться в определенных местах)
GridBaqConstraints . CENTER
GridBaqConstraints . EAST
GridBaqConstraints . NORTH
GridBaqConstraints . NORTHEAST
GridBaqConstraints . NORTHWEST
GridBaqConstraints . SOOTH
GridBaqConstraints . SOUTHEAST
GridBaqConstraints . SOUTHWEST
GridВaqConstraints . WEST

Значения второго типа, которые могут быть заданы в поле anchor,
являются относительными к ориентации контейнера, которая может отличаться
в случае языков, отличающихся от западных.

GridBagConstraints . FIRST_LINE_END
GridBagConstraint s . FIRST_LINE_START
GridBagCons tra ints . LAST LI NE_END
GridBagConstraints . LAST_LINE_START
Их имена описывают расположение.
GridBagConstraints . LINE_END
GridBa gCon straints . LINE_START
GridBagConstraints . PAGE_END
GridBagConstra ints . PAGE_START

Значения третьего типа, которые можно указывать в поле anchor,
позволяют позиционировать компоненты относительно базовой линии строки:

GridBagCons traints . BAS ELINE GridBagConstra ints . BASELINE_LEAD ING
GridBa gConstraints . BASELINE TRAILING GridBagConst raints . AВOVE_BASELINE
GridВagConstraints . ABOVE_BASELINE_LEADING GridBagConstraints. ABOVE_BASELINE_TRAILING
GridBa gConstraints . BELOW _ BASELINE GridВagConstraints . BELOW _BASELINE _ LEADING
GridBagConstraints.BELOW_BASELINE_TRAILING

Горизонтальная позиция может находиться по центру, по переднему краю
(LEADING) или по заднему краю (TRAILING).

Поля weightx и weighty очень важны, хотя на первый взгляд сбивают с
толку. Как правило, их значения определяют, сколько дополнительного
пространства в контейнере выделяется для каждой строки и колонки.
По умолчанию оба поля имеют нулевые значения. Когда все значения в строке или
колонке равны нулю, дополнительное пространство равномерно
распределяется между краями окна. За счет увеличения веса увеличивается выделение
пространства данной строке или колонке пропорционально другим строкам
или колонкам

Переменная gridwidth позволяет задать ширину ячейки в
единицах ячейки. Стандартное значение равно 1.
Для указания о том, что компонент использует оставшееся
пространство в строке, нужно применить GridBagConstraints.REMAINDER.
 Чтобы указать, что компонент использует предпоследнюю ячейку в строке,
необходимо применить GridBagConstraints.RELATIVE.
Ограничение gridheight работает аналогично, но в вертикальном направлении.

Можно указать значение заполнения, которое будет использоваться для
увеличения минимального размера ячейки. Для горизонтального заполнения
понадобится присвоить значение ipadx, а для вертикального заполнения -
ipady

Класс GridBagLayout является мощным диспетчером компоновки и
потому стоит потратить некоторое время на его исследование посредством
экспериментирования.
Как только вы поймете, что делают различные настройки,
то сможете применять GridBagLayout для позиционирования компонентов с
высокой степенью точности.