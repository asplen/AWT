**************************************************************
Добавление и удаление элементов управления
--------------------------------------------------------------

Чтобы включить элемент управления в состав окна, его потребуется поместить в окно, для чего сначала создать
экземпляр желаемого элемента управления и затем добавить в окно, вызвав метод add (), который определен в
классе Container.

Component add ( Component compRef)

В compRef передается ссылка на экземпляр элемента управления, который
необходимо добавить. Возвращается ссылка на данный объект. После добавления элемента управления
он автоматически становится видимым всякий раз, когда отображается его родительское окно.
--------------------------------------------------------------
Иногда может понадобиться удалить элемент управления из окна, когда он
больше не нужен. Для этого следует вызвать метод remove(), который тоже
определен в классе Container.

void remove(Component compRef)

В compRef передается ссылка на экземпляр элемента управления, который
должен быть удален. Для удаления всех элементов управления предназначен
метод removeAll ().
**************************************************************
Реагирование на события, генерируемые элементами управления
--------------------------------------------------------------

Кроме меток, которые являются пассивными, все остальные элементы
управления генерируют события при доступе к ним со стороны пользователя.
Например, когда пользователь щелкает на кнопке, отправляется событие,
идентифицирующее кнопку. В общем случае программа просто реализует
подходящий интерфейс, а затем регистрирует прослушиватель событий для
каждого элемента управления, который необходимо отслеживать.

**************************************************************
Исключение HeadlessException
--------------------------------------------------------------

Большинство описанных в главе элементов управления AWT имеют конструкторы,
которые могут генерировать исключение Headles sExcept ion
при попытке создать экземпляр компонента графического пользовательского
интерфейса в среде, не обладающей интерактивностью (скажем, в среде,
где нет дисплея, мыши или клавиатуры). Упомянутое исключение можно
использовать для написания кода, который способен адаптироваться к
неинтерактивным средам. (Конечно, это возможно далеко не всегда.) Исключение
HeadlessException не обрабатывается в рассматриваемых в главе примерах
программ, т.к. для демонстрации элементов управления АWT требуется интерактивная среда.

**************************************************************
Метки
--------------------------------------------------------------

Самым простым элементом управления является метка, представляющая
собой объект типа Label, который содержит отображаемую строку.
Метки - пассивные элементы управления, которые не поддерживают никакого
взаимодействия с пользователем. В классе Label определены следующие конструкторы:

Label() throws HeadlessException                            /создает пустую метку/

Label(String str) th rows HeadlessException                 /вторая форма создает метку, которая содержит строку, заданную параметром str/

Label {Str iг.g str, int how) throws HeadlessException      /создает метку, которая содержит строку, указанную в str, с применением
                                                             выравнивания, заданноrо в how.
                                                             Значением параметра how должна быть одна из трех констант:
                                                             Label.LEFT,
                                                             Label.RIGHT
                                                             Label.CENTER/

void setText(String str)                                     /установить или изменить текст в метке/

String getText ()                                            /получить текущую метку/

void setAlignment(int how)                                   /установить выравнивание строки внутри метки.
                                                              Значением how должна быть одна из указанных
                                                              ранее констант выравнивания/

int getAlignment()                                            /получить текущее выравнивание/

Метки располагаются в окне слева направо, что автоматически обрабатывается диспетчером компоновки FlowLayout, который
входит в набор таких диспетчеров, предоставляемых AWT. Здесь он применяется со своей стандартной конфигурацией,
которая предусматривает размещение компонентов построчно, слева направо, сверху вниз и по центру.
Как будет показано далее в главе, диспетчер компоновки FlowLayout померживает
несколько параметров, но пока вполне достаточно ero стандартного поведения. Обратите внимание,
что FlowLayout выбирается в качестве диспетчера
компоновки с помощью метода setLayout(), устанавливающего диспетчер
компоновки, ассоциированный с контейнером, которым в данном случае является объемлющий фрейм.

Хотя FlowLayout очень удобен и приемлем для
текущих целей, он не позволяет управлять размещением компонентов в окне.
